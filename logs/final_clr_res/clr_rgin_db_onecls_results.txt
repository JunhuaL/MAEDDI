Namespace(configfile='./configs/DrugBank/clr/4_clr_onecls_RGIN.yml')
{'dataset': 'DrugBank', 'task': 'binary', 'category': 'DDI', 'entry1_file': './dataset/DrugBank/drug/processed/data.pt', 'entry2_file': './dataset/DrugBank/drug/processed/data.pt', 'entry1_seq_file': './dataset/DrugBank/drug/drug.csv', 'pair_file': './dataset/DrugBank/binary_1vs1/entry_pairs.csv', 'label_file': './dataset/DrugBank/binary_1vs1/pair_labels.csv', 'save_folder': './output/CLR/RGIN/DrugBank/binary_1vs1/one_cluster/', 'split_strategy': 'whole_cluster_sampling', 'gconv_ckpt': './model_checkpoints/clr_epoch_RGIN_20_layers_4_random/last.ckpt', 'lin_eval': False, 'model_type': 'deepdrug', 'gpus': 0, 'num_out_dim': 1, 'n_layers': 4, 'g_conv': 'RGIN', 'lr': 0.0001}
print parameters:
{
  "earlystopping_tracking": "val_epoch_F1",
  "entry1_data_folder": "./dataset/DrugBank/drug",
  "entry1_seq_file": "./dataset/DrugBank/drug/drug.csv",
  "entry2_data_folder": "./dataset/DrugBank/drug",
  "entry2_seq_file": null,
  "entry_pairs_file": "./dataset/DrugBank/binary_1vs1/entry_pairs.csv",
  "gpus": 0,
  "model_type": "deepdrug",
  "pair_labels_file": "./dataset/DrugBank/binary_1vs1/pair_labels.csv",
  "save_folder": "./output/CLR/RGIN/DrugBank/binary_1vs1/one_cluster/",
  "scheduler_ReduceLROnPlateau_tracking": "F1",
  "split_strat": "whole_cluster_sampling",
  "task_type": "binary",
  "y_pred_file": "./output/CLR/RGIN/DrugBank/binary_1vs1/one_cluster/test_pred.csv",
  "y_transfrom_func": null,
  "y_true_file": "./output/CLR/RGIN/DrugBank/binary_1vs1/one_cluster/test_true.csv"
}
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=11, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=11, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=256, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
preparing dataset...
loading processed data...
add degrees as node features for each sample...
loading processed data...
add degrees as node features for each sample...
can not find cv_file,  whole_cluster_sampling ...
0.6880753865996238
0.12463014365207473
0.18729446974830147
in val dataloader...

val:Ep0000|| F1: 0.000,auROC nan,auPRC: 1.000
in train dataloader...

val:Ep0000|| F1: 0.672,auROC 0.718,auPRC: 0.692

trn:Ep0000|| F1: 0.658,auROC 0.683,auPRC: 0.630

val:Ep0001|| F1: 0.680,auROC 0.743,auPRC: 0.730

trn:Ep0001|| F1: 0.692,auROC 0.758,auPRC: 0.723

val:Ep0002|| F1: 0.689,auROC 0.776,auPRC: 0.763

trn:Ep0002|| F1: 0.721,auROC 0.801,auPRC: 0.774

val:Ep0003|| F1: 0.713,auROC 0.785,auPRC: 0.772

trn:Ep0003|| F1: 0.749,auROC 0.833,auPRC: 0.811

val:Ep0004|| F1: 0.496,auROC 0.754,auPRC: 0.742

trn:Ep0004|| F1: 0.772,auROC 0.857,auPRC: 0.836

val:Ep0005|| F1: 0.609,auROC 0.790,auPRC: 0.779

trn:Ep0005|| F1: 0.788,auROC 0.873,auPRC: 0.854

val:Ep0006|| F1: 0.700,auROC 0.792,auPRC: 0.780

trn:Ep0006|| F1: 0.803,auROC 0.886,auPRC: 0.866

val:Ep0007|| F1: 0.627,auROC 0.787,auPRC: 0.783

trn:Ep0007|| F1: 0.814,auROC 0.896,auPRC: 0.878

val:Ep0008|| F1: 0.666,auROC 0.806,auPRC: 0.800

trn:Ep0008|| F1: 0.824,auROC 0.904,auPRC: 0.886

val:Ep0009|| F1: 0.707,auROC 0.805,auPRC: 0.799

trn:Ep0009|| F1: 0.832,auROC 0.911,auPRC: 0.894

val:Ep0010|| F1: 0.715,auROC 0.804,auPRC: 0.799

trn:Ep0010|| F1: 0.839,auROC 0.918,auPRC: 0.901

val:Ep0011|| F1: 0.653,auROC 0.809,auPRC: 0.804

trn:Ep0011|| F1: 0.846,auROC 0.923,auPRC: 0.907

val:Ep0012|| F1: 0.664,auROC 0.800,auPRC: 0.802

trn:Ep0012|| F1: 0.851,auROC 0.927,auPRC: 0.912

val:Ep0013|| F1: 0.674,auROC 0.797,auPRC: 0.794

trn:Ep0013|| F1: 0.856,auROC 0.931,auPRC: 0.917

val:Ep0014|| F1: 0.701,auROC 0.806,auPRC: 0.806

trn:Ep0014|| F1: 0.861,auROC 0.935,auPRC: 0.921

val:Ep0015|| F1: 0.685,auROC 0.806,auPRC: 0.806

trn:Ep0015|| F1: 0.865,auROC 0.938,auPRC: 0.926

val:Ep0016|| F1: 0.622,auROC 0.787,auPRC: 0.790

trn:Ep0016|| F1: 0.869,auROC 0.941,auPRC: 0.929

val:Ep0017|| F1: 0.662,auROC 0.790,auPRC: 0.794

trn:Ep0017|| F1: 0.872,auROC 0.944,auPRC: 0.931

val:Ep0018|| F1: 0.700,auROC 0.804,auPRC: 0.804

trn:Ep0018|| F1: 0.876,auROC 0.946,auPRC: 0.935

val:Ep0019|| F1: 0.655,auROC 0.796,auPRC: 0.797
Epoch    21: reducing learning rate of group 0 to 1.0000e-05.

trn:Ep0019|| F1: 0.878,auROC 0.949,auPRC: 0.938

val:Ep0020|| F1: 0.677,auROC 0.804,auPRC: 0.804
loading best weight in C:\Users\junhu\Desktop\Dissertation\MAEDDI\output\CLR\RGIN\DrugBank\binary_1vs1\one_cluster\models\epoch=10-step=11308.ckpt ...
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=11, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=11, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=256, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
in test dataloader...

tst:Ep0021|| F1: 0.701,auROC 0.753,auPRC: 0.804
------------------------------------------------------------------------------------------------------------------------
       Test metric             DataLoader 0
------------------------------------------------------------------------------------------------------------------------
        test_loss           0.6737579107284546
------------------------------------------------------------------------------------------------------------------------
in test dataloader...
save prediction completed.
