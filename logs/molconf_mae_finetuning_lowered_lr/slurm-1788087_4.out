Job running on landonia09
Job started: 12/03/2024 15:47:32
Setting up bash environment
Activating conda environment: masters
Running provided command: python molconf_finetuning.py --configfile=./configs/MolConfConfigs/mae/4_molconf_onecls_lineval.yml
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
[15:48:53] SMILES Parse Error: syntax error while parsing: OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1
[15:48:53] SMILES Parse Error: Failed parsing SMILES 'OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1' for input: 'OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1'
[15:48:53] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:54] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:54] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:54] Explicit valence for atom # 0 N, 4, is greater than permitted
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name  | Type     | Params
-----------------------------------
0 | model | DeepDrug | 1.1 M 
-----------------------------------
70.1 K    Trainable params
1.1 M     Non-trainable params
1.1 M     Total params
4.576     Total estimated model params size (MB)
Metric val_epoch_F1 improved. New best score: 0.723
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.725
Metric val_epoch_F1 improved by 0.003 >= min_delta = 0.001. New best score: 0.728
Metric val_epoch_F1 improved by 0.005 >= min_delta = 0.001. New best score: 0.733
Metric val_epoch_F1 improved by 0.005 >= min_delta = 0.001. New best score: 0.738
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.740
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.742
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.743
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.744
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.746
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.747
Monitored metric val_epoch_F1 did not improve in the last 10 records. Best score: 0.747. Signaling Trainer to stop.
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Namespace(configfile='./configs/MolConfConfigs/mae/4_molconf_onecls_lineval.yml')
{'dataset': 'DrugBank', 'task': 'binary', 'category': 'DDI', 'entry1_file': './dataset/DrugBank/drug/processed/data.pt', 'entry2_file': './dataset/DrugBank/drug/processed/data.pt', 'entry1_seq_file': './dataset/DrugBank/drug/drug.csv', 'pair_file': './dataset/DrugBank/binary_1vs1/entry_pairs.csv', 'label_file': './dataset/DrugBank/binary_1vs1/pair_labels.csv', 'save_folder': './output/mol_conf/mae/DrugBank/binary_1vs1/one_cluster/lin_eval/', 'split_strategy': 'whole_cluster_sampling', 'gconv_ckpt': './model_checkpoints/molconf_mae_epoch_20_layers_4_random/last.ckpt', 'lin_eval': True, 'model_type': 'deepdrug', 'gpus': 0, 'num_out_dim': 1, 'n_layers': 4, 'n_confs': 1, 'lr': 1e-05}
print parameters:
{
  "earlystopping_tracking": "val_epoch_F1",
  "entry1_data_folder": "./dataset/DrugBank/drug",
  "entry1_seq_file": "./dataset/DrugBank/drug/drug.csv",
  "entry2_data_folder": "./dataset/DrugBank/drug",
  "entry2_seq_file": null,
  "entry_pairs_file": "./dataset/DrugBank/binary_1vs1/entry_pairs.csv",
  "gpus": 0,
  "model_type": "deepdrug",
  "pair_labels_file": "./dataset/DrugBank/binary_1vs1/pair_labels.csv",
  "save_folder": "./output/mol_conf/mae/DrugBank/binary_1vs1/one_cluster/lin_eval/",
  "scheduler_ReduceLROnPlateau_tracking": "F1",
  "split_strat": "whole_cluster_sampling",
  "task_type": "binary",
  "y_pred_file": "./output/mol_conf/mae/DrugBank/binary_1vs1/one_cluster/lin_eval/test_pred.csv",
  "y_transfrom_func": null,
  "y_true_file": "./output/mol_conf/mae/DrugBank/binary_1vs1/one_cluster/lin_eval/test_true.csv"
}
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (gconv1_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=512, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
MAEModel(
  (mol_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (mol_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=121, bias=True)
      (1): LayerNorm((121,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (conf_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (conf_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=14, bias=True)
      (1): LayerNorm((14,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=128, out_features=6, bias=True)
      (1): LayerNorm((6,), eps=1e-05, elementwise_affine=True)
    )
    (edge_decoder): Linear(in_features=14, out_features=6, bias=True)
  )
  (enc2dec_mol_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_edges): Linear(in_features=128, out_features=128, bias=False)
)
MAEModel(
  (mol_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (mol_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=121, bias=True)
      (1): LayerNorm((121,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (conf_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (conf_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=14, bias=True)
      (1): LayerNorm((14,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=128, out_features=6, bias=True)
      (1): LayerNorm((6,), eps=1e-05, elementwise_affine=True)
    )
    (edge_decoder): Linear(in_features=14, out_features=6, bias=True)
  )
  (enc2dec_mol_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_edges): Linear(in_features=128, out_features=128, bias=False)
)
preparing dataset...
loading processed data...
add degrees as node features for each sample...
using drug sequences file: ./dataset/DrugBank/drug
loading processed data...
add degrees as node features for each sample...
the order of entryIDs are not the same in dataset 1 & 2 .
checking entryIDs finished for MultiEmbedDataset_v1.
loading processed data...
add degrees as node features for each sample...
using target sequences file: ./dataset/DrugBank/drug
loading processed data...
add degrees as node features for each sample...
the order of entryIDs are not the same in dataset 1 & 2 .
checking entryIDs finished for MultiEmbedDataset_v1.
can not find cv_file,  whole_cluster_sampling ...
0.6981789071349901
0.10502481405807301
0.19679627880693695
in val dataloader...

val:Ep0000|| F1: 0.000,auROC nan,auPRC: 1.000
in train dataloader...

val:Ep0000|| F1: 0.723,auROC 0.648,auPRC: 0.665

trn:Ep0000|| F1: 0.582,auROC 0.550,auPRC: 0.522

val:Ep0001|| F1: 0.725,auROC 0.674,auPRC: 0.697

trn:Ep0001|| F1: 0.592,auROC 0.586,auPRC: 0.557

val:Ep0002|| F1: 0.728,auROC 0.692,auPRC: 0.716

trn:Ep0002|| F1: 0.593,auROC 0.603,auPRC: 0.570

val:Ep0003|| F1: 0.733,auROC 0.699,auPRC: 0.721

trn:Ep0003|| F1: 0.596,auROC 0.613,auPRC: 0.580

val:Ep0004|| F1: 0.738,auROC 0.710,auPRC: 0.730

trn:Ep0004|| F1: 0.600,auROC 0.621,auPRC: 0.587

val:Ep0005|| F1: 0.740,auROC 0.715,auPRC: 0.732

trn:Ep0005|| F1: 0.607,auROC 0.631,auPRC: 0.597

val:Ep0006|| F1: 0.742,auROC 0.720,auPRC: 0.736

trn:Ep0006|| F1: 0.612,auROC 0.635,auPRC: 0.600

val:Ep0007|| F1: 0.743,auROC 0.723,auPRC: 0.737

trn:Ep0007|| F1: 0.613,auROC 0.637,auPRC: 0.602

val:Ep0008|| F1: 0.744,auROC 0.727,auPRC: 0.741

trn:Ep0008|| F1: 0.620,auROC 0.645,auPRC: 0.610

val:Ep0009|| F1: 0.746,auROC 0.728,auPRC: 0.742

trn:Ep0009|| F1: 0.621,auROC 0.648,auPRC: 0.614

val:Ep0010|| F1: 0.745,auROC 0.730,auPRC: 0.743

trn:Ep0010|| F1: 0.626,auROC 0.652,auPRC: 0.616

val:Ep0011|| F1: 0.747,auROC 0.731,auPRC: 0.743

trn:Ep0011|| F1: 0.628,auROC 0.655,auPRC: 0.620

val:Ep0012|| F1: 0.747,auROC 0.733,auPRC: 0.744

trn:Ep0012|| F1: 0.631,auROC 0.658,auPRC: 0.621

val:Ep0013|| F1: 0.748,auROC 0.734,auPRC: 0.744

trn:Ep0013|| F1: 0.631,auROC 0.660,auPRC: 0.625

val:Ep0014|| F1: 0.747,auROC 0.737,auPRC: 0.747

trn:Ep0014|| F1: 0.634,auROC 0.663,auPRC: 0.628

val:Ep0015|| F1: 0.747,auROC 0.736,auPRC: 0.747

trn:Ep0015|| F1: 0.636,auROC 0.665,auPRC: 0.629

val:Ep0016|| F1: 0.746,auROC 0.737,auPRC: 0.747

trn:Ep0016|| F1: 0.639,auROC 0.667,auPRC: 0.632

val:Ep0017|| F1: 0.746,auROC 0.738,auPRC: 0.748

trn:Ep0017|| F1: 0.639,auROC 0.669,auPRC: 0.635

val:Ep0018|| F1: 0.746,auROC 0.739,auPRC: 0.750

trn:Ep0018|| F1: 0.640,auROC 0.671,auPRC: 0.638

val:Ep0019|| F1: 0.746,auROC 0.740,auPRC: 0.751

trn:Ep0019|| F1: 0.643,auROC 0.674,auPRC: 0.640

val:Ep0020|| F1: 0.747,auROC 0.741,auPRC: 0.751

trn:Ep0020|| F1: 0.643,auROC 0.674,auPRC: 0.640

val:Ep0021|| F1: 0.746,auROC 0.742,auPRC: 0.754
loading best weight in /home/s1950841/MAEDDI/output/mol_conf/mae/DrugBank/binary_1vs1/one_cluster/lin_eval/models/epoch=13-step=14602.ckpt ...
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (gconv1_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=512, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
in test dataloader...

tst:Ep0022|| F1: 0.627,auROC 0.641,auPRC: 0.602
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       Test metric             DataLoader 0
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
        test_loss           0.6749337911605835
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
in test dataloader...
save prediction completed.
Command ran successfully!

============
job finished successfully
Job finished: 12/03/2024 17:28:14
