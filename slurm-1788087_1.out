Job running on landonia20
Job started: 12/03/2024 15:47:31
Setting up bash environment
Activating conda environment: masters
Running provided command: python molconf_finetuning.py --configfile=./configs/MolConfConfigs/mae/4_molconf_allcls_lineval.yml
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
[15:48:51] SMILES Parse Error: syntax error while parsing: OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1
[15:48:51] SMILES Parse Error: Failed parsing SMILES 'OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1' for input: 'OC1=CC=CC(=C1)C-1=C2\CCC(=N2)\C(=C2/N\C(\C=C2)=C(/C2=N/C(/C=C2)=C(\C2=CC=C\-1N2)C1=CC(O)=CC=C1)C1=CC(O)=CC=C1)\C1=CC(O)=CC=C1'
[15:48:51] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:52] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:52] Explicit valence for atom # 0 N, 4, is greater than permitted
[15:48:52] Explicit valence for atom # 0 N, 4, is greater than permitted
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name  | Type     | Params
-----------------------------------
0 | model | DeepDrug | 1.1 M 
-----------------------------------
70.1 K    Trainable params
1.1 M     Non-trainable params
1.1 M     Total params
4.576     Total estimated model params size (MB)
Metric val_epoch_F1 improved. New best score: 0.673
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.674
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.676
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.678
Metric val_epoch_F1 improved by 0.003 >= min_delta = 0.001. New best score: 0.680
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.682
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.684
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.685
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.686
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.688
Metric val_epoch_F1 improved by 0.003 >= min_delta = 0.001. New best score: 0.691
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.692
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.693
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.695
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.696
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.697
Metric val_epoch_F1 improved by 0.002 >= min_delta = 0.001. New best score: 0.699
Metric val_epoch_F1 improved by 0.001 >= min_delta = 0.001. New best score: 0.700
`Trainer.fit` stopped: `max_epochs=50` reached.
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Namespace(configfile='./configs/MolConfConfigs/mae/4_molconf_allcls_lineval.yml')
{'dataset': 'DrugBank', 'task': 'binary', 'category': 'DDI', 'entry1_file': './dataset/DrugBank/drug/processed/data.pt', 'entry2_file': './dataset/DrugBank/drug/processed/data.pt', 'entry1_seq_file': './dataset/DrugBank/drug/drug.csv', 'pair_file': './dataset/DrugBank/binary_1vs1/entry_pairs.csv', 'label_file': './dataset/DrugBank/binary_1vs1/pair_labels.csv', 'save_folder': './output/mol_conf/mae/DrugBank/binary_1vs1/all_cluster/lin_eval/', 'split_strategy': 'sample_from_all_clusters', 'gconv_ckpt': './model_checkpoints/molconf_mae_epoch_20_layers_4_random/last.ckpt', 'lin_eval': True, 'model_type': 'deepdrug', 'gpus': 0, 'num_out_dim': 1, 'n_layers': 4, 'n_confs': 1, 'lr': 1e-05}
print parameters:
{
  "earlystopping_tracking": "val_epoch_F1",
  "entry1_data_folder": "./dataset/DrugBank/drug",
  "entry1_seq_file": "./dataset/DrugBank/drug/drug.csv",
  "entry2_data_folder": "./dataset/DrugBank/drug",
  "entry2_seq_file": null,
  "entry_pairs_file": "./dataset/DrugBank/binary_1vs1/entry_pairs.csv",
  "gpus": 0,
  "model_type": "deepdrug",
  "pair_labels_file": "./dataset/DrugBank/binary_1vs1/pair_labels.csv",
  "save_folder": "./output/mol_conf/mae/DrugBank/binary_1vs1/all_cluster/lin_eval/",
  "scheduler_ReduceLROnPlateau_tracking": "F1",
  "split_strat": "sample_from_all_clusters",
  "task_type": "binary",
  "y_pred_file": "./output/mol_conf/mae/DrugBank/binary_1vs1/all_cluster/lin_eval/test_pred.csv",
  "y_transfrom_func": null,
  "y_true_file": "./output/mol_conf/mae/DrugBank/binary_1vs1/all_cluster/lin_eval/test_true.csv"
}
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (gconv1_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=512, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
MAEModel(
  (mol_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (mol_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=121, bias=True)
      (1): LayerNorm((121,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (conf_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (conf_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=14, bias=True)
      (1): LayerNorm((14,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=128, out_features=6, bias=True)
      (1): LayerNorm((6,), eps=1e-05, elementwise_affine=True)
    )
    (edge_decoder): Linear(in_features=14, out_features=6, bias=True)
  )
  (enc2dec_mol_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_edges): Linear(in_features=128, out_features=128, bias=False)
)
MAEModel(
  (mol_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (mol_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=121, bias=True)
      (1): LayerNorm((121,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (conf_encoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (conf_decoder): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=128, out_features=14, bias=True)
      (1): LayerNorm((14,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=128, out_features=6, bias=True)
      (1): LayerNorm((6,), eps=1e-05, elementwise_affine=True)
    )
    (edge_decoder): Linear(in_features=14, out_features=6, bias=True)
  )
  (enc2dec_mol_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_nodes): Linear(in_features=128, out_features=128, bias=False)
  (enc2dec_conf_edges): Linear(in_features=128, out_features=128, bias=False)
)
preparing dataset...
loading processed data...
add degrees as node features for each sample...
using drug sequences file: ./dataset/DrugBank/drug
loading processed data...
add degrees as node features for each sample...
the order of entryIDs are not the same in dataset 1 & 2 .
checking entryIDs finished for MultiEmbedDataset_v1.
loading processed data...
add degrees as node features for each sample...
using target sequences file: ./dataset/DrugBank/drug
loading processed data...
add degrees as node features for each sample...
the order of entryIDs are not the same in dataset 1 & 2 .
checking entryIDs finished for MultiEmbedDataset_v1.
can not find cv_file,  sample_from_all_clusters ...
0.6574273433391847
0.12638818761887072
0.21618446904194452
in val dataloader...

val:Ep0000|| F1: 0.362,auROC nan,auPRC: 1.000
in train dataloader...

val:Ep0000|| F1: 0.673,auROC 0.620,auPRC: 0.602

trn:Ep0000|| F1: 0.655,auROC 0.543,auPRC: 0.532

val:Ep0001|| F1: 0.674,auROC 0.638,auPRC: 0.622

trn:Ep0001|| F1: 0.653,auROC 0.588,auPRC: 0.574

val:Ep0002|| F1: 0.673,auROC 0.646,auPRC: 0.630

trn:Ep0002|| F1: 0.646,auROC 0.608,auPRC: 0.592

val:Ep0003|| F1: 0.675,auROC 0.651,auPRC: 0.635

trn:Ep0003|| F1: 0.638,auROC 0.615,auPRC: 0.599

val:Ep0004|| F1: 0.676,auROC 0.658,auPRC: 0.641

trn:Ep0004|| F1: 0.635,auROC 0.623,auPRC: 0.607

val:Ep0005|| F1: 0.678,auROC 0.663,auPRC: 0.645

trn:Ep0005|| F1: 0.636,auROC 0.629,auPRC: 0.613

val:Ep0006|| F1: 0.678,auROC 0.667,auPRC: 0.649

trn:Ep0006|| F1: 0.638,auROC 0.636,auPRC: 0.619

val:Ep0007|| F1: 0.680,auROC 0.671,auPRC: 0.652

trn:Ep0007|| F1: 0.640,auROC 0.640,auPRC: 0.623

val:Ep0008|| F1: 0.682,auROC 0.675,auPRC: 0.656

trn:Ep0008|| F1: 0.641,auROC 0.643,auPRC: 0.626

val:Ep0009|| F1: 0.682,auROC 0.678,auPRC: 0.659

trn:Ep0009|| F1: 0.643,auROC 0.646,auPRC: 0.630

val:Ep0010|| F1: 0.684,auROC 0.681,auPRC: 0.662

trn:Ep0010|| F1: 0.647,auROC 0.651,auPRC: 0.634

val:Ep0011|| F1: 0.684,auROC 0.683,auPRC: 0.664

trn:Ep0011|| F1: 0.649,auROC 0.654,auPRC: 0.636

val:Ep0012|| F1: 0.685,auROC 0.685,auPRC: 0.666

trn:Ep0012|| F1: 0.650,auROC 0.656,auPRC: 0.639

val:Ep0013|| F1: 0.685,auROC 0.686,auPRC: 0.667

trn:Ep0013|| F1: 0.652,auROC 0.658,auPRC: 0.640

val:Ep0014|| F1: 0.686,auROC 0.689,auPRC: 0.669

trn:Ep0014|| F1: 0.652,auROC 0.660,auPRC: 0.643

val:Ep0015|| F1: 0.687,auROC 0.690,auPRC: 0.670

trn:Ep0015|| F1: 0.654,auROC 0.662,auPRC: 0.644

val:Ep0016|| F1: 0.688,auROC 0.692,auPRC: 0.673

trn:Ep0016|| F1: 0.656,auROC 0.665,auPRC: 0.646

val:Ep0017|| F1: 0.689,auROC 0.693,auPRC: 0.673

trn:Ep0017|| F1: 0.655,auROC 0.666,auPRC: 0.649

val:Ep0018|| F1: 0.689,auROC 0.694,auPRC: 0.674

trn:Ep0018|| F1: 0.657,auROC 0.668,auPRC: 0.650

val:Ep0019|| F1: 0.691,auROC 0.696,auPRC: 0.676

trn:Ep0019|| F1: 0.659,auROC 0.670,auPRC: 0.653

val:Ep0020|| F1: 0.691,auROC 0.697,auPRC: 0.676

trn:Ep0020|| F1: 0.659,auROC 0.671,auPRC: 0.654

val:Ep0021|| F1: 0.692,auROC 0.699,auPRC: 0.677

trn:Ep0021|| F1: 0.658,auROC 0.672,auPRC: 0.656

val:Ep0022|| F1: 0.692,auROC 0.700,auPRC: 0.679

trn:Ep0022|| F1: 0.660,auROC 0.673,auPRC: 0.656

val:Ep0023|| F1: 0.692,auROC 0.700,auPRC: 0.679

trn:Ep0023|| F1: 0.661,auROC 0.676,auPRC: 0.660

val:Ep0024|| F1: 0.693,auROC 0.701,auPRC: 0.680

trn:Ep0024|| F1: 0.662,auROC 0.676,auPRC: 0.660

val:Ep0025|| F1: 0.693,auROC 0.702,auPRC: 0.681

trn:Ep0025|| F1: 0.663,auROC 0.678,auPRC: 0.661

val:Ep0026|| F1: 0.693,auROC 0.703,auPRC: 0.681

trn:Ep0026|| F1: 0.662,auROC 0.678,auPRC: 0.662

val:Ep0027|| F1: 0.694,auROC 0.704,auPRC: 0.682

trn:Ep0027|| F1: 0.664,auROC 0.680,auPRC: 0.664

val:Ep0028|| F1: 0.695,auROC 0.705,auPRC: 0.683

trn:Ep0028|| F1: 0.665,auROC 0.680,auPRC: 0.663

val:Ep0029|| F1: 0.694,auROC 0.706,auPRC: 0.683

trn:Ep0029|| F1: 0.665,auROC 0.682,auPRC: 0.665

val:Ep0030|| F1: 0.695,auROC 0.707,auPRC: 0.685

trn:Ep0030|| F1: 0.666,auROC 0.682,auPRC: 0.666

val:Ep0031|| F1: 0.695,auROC 0.707,auPRC: 0.685

trn:Ep0031|| F1: 0.666,auROC 0.684,auPRC: 0.668

val:Ep0032|| F1: 0.696,auROC 0.708,auPRC: 0.686

trn:Ep0032|| F1: 0.667,auROC 0.684,auPRC: 0.668

val:Ep0033|| F1: 0.696,auROC 0.709,auPRC: 0.686

trn:Ep0033|| F1: 0.666,auROC 0.685,auPRC: 0.670

val:Ep0034|| F1: 0.696,auROC 0.710,auPRC: 0.687

trn:Ep0034|| F1: 0.668,auROC 0.687,auPRC: 0.670

val:Ep0035|| F1: 0.697,auROC 0.711,auPRC: 0.688

trn:Ep0035|| F1: 0.668,auROC 0.687,auPRC: 0.672

val:Ep0036|| F1: 0.697,auROC 0.711,auPRC: 0.688

trn:Ep0036|| F1: 0.667,auROC 0.688,auPRC: 0.672

val:Ep0037|| F1: 0.697,auROC 0.712,auPRC: 0.690

trn:Ep0037|| F1: 0.669,auROC 0.690,auPRC: 0.674

val:Ep0038|| F1: 0.697,auROC 0.712,auPRC: 0.689

trn:Ep0038|| F1: 0.669,auROC 0.690,auPRC: 0.674

val:Ep0039|| F1: 0.698,auROC 0.712,auPRC: 0.689

trn:Ep0039|| F1: 0.668,auROC 0.690,auPRC: 0.674

val:Ep0040|| F1: 0.699,auROC 0.714,auPRC: 0.691

trn:Ep0040|| F1: 0.670,auROC 0.691,auPRC: 0.675

val:Ep0041|| F1: 0.699,auROC 0.714,auPRC: 0.690

trn:Ep0041|| F1: 0.670,auROC 0.693,auPRC: 0.678

val:Ep0042|| F1: 0.700,auROC 0.715,auPRC: 0.691

trn:Ep0042|| F1: 0.670,auROC 0.693,auPRC: 0.677

val:Ep0043|| F1: 0.699,auROC 0.715,auPRC: 0.691

trn:Ep0043|| F1: 0.670,auROC 0.693,auPRC: 0.677

val:Ep0044|| F1: 0.700,auROC 0.716,auPRC: 0.692

trn:Ep0044|| F1: 0.672,auROC 0.695,auPRC: 0.679

val:Ep0045|| F1: 0.700,auROC 0.716,auPRC: 0.692

trn:Ep0045|| F1: 0.671,auROC 0.694,auPRC: 0.678

val:Ep0046|| F1: 0.700,auROC 0.716,auPRC: 0.691

trn:Ep0046|| F1: 0.672,auROC 0.695,auPRC: 0.680

val:Ep0047|| F1: 0.700,auROC 0.717,auPRC: 0.692

trn:Ep0047|| F1: 0.673,auROC 0.697,auPRC: 0.681

val:Ep0048|| F1: 0.701,auROC 0.718,auPRC: 0.693

trn:Ep0048|| F1: 0.673,auROC 0.697,auPRC: 0.680

val:Ep0049|| F1: 0.700,auROC 0.718,auPRC: 0.693
loading best weight in /home/s1950841/MAEDDI/output/mol_conf/mae/DrugBank/binary_1vs1/all_cluster/lin_eval/models/epoch=48-step=48118.ckpt ...
DeepDrug(
  (gconv1): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (gconv1_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2_conf): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=14, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
    (edge_encoder): Sequential(
      (0): Linear(in_features=6, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (gconv2): DeeperGCN(
    (node_encoder): Sequential(
      (0): Linear(in_features=121, out_features=128, bias=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (gcn_blocks): ModuleList(
      (0): ModuleList(
        (0): DeepGCNLayerV2(block=res+)
        (1): DeepGCNLayerV2(block=res+)
        (2): DeepGCNLayerV2(block=res+)
        (3): DeepGCNLayerV2(block=res+)
      )
    )
  )
  (global_fc_nn): Sequential(
    (0): Linear(in_features=512, out_features=128, bias=True)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Dropout(p=0.2, inplace=False)
    (3): ReLU()
    (4): Linear(in_features=128, out_features=32, bias=True)
    (5): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Dropout(p=0.2, inplace=False)
    (7): ReLU()
  )
  (fc2): Linear(in_features=32, out_features=1, bias=True)
)
in test dataloader...

tst:Ep0050|| F1: 0.681,auROC 0.712,auPRC: 0.655
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       Test metric             DataLoader 0
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
        test_loss           0.6457784175872803
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
in test dataloader...
save prediction completed.
Command ran successfully!

============
job finished successfully
Job finished: 12/03/2024 19:31:23
